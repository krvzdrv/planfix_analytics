#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API task.getList —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
"""

import os
import sys
import logging
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Add the parent directory to the Python path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
import scripts.planfix_utils as planfix_utils

logger = logging.getLogger(__name__)

def test_task_list():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç API task.getList
    """
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API task.getList...")
    
    try:
        # –¢–µ—Å—Ç 1: –ë–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        print("\nüìã –¢–µ—Å—Ç 1: task.getList –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤...")
        response = planfix_utils.make_planfix_request('task.getList', {})
        print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, –¥–ª–∏–Ω–∞: {len(response)}")
        print(f"üìÑ –ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤: {response[:500]}...")
        
        # –¢–µ—Å—Ç 2: –° –±–∞–∑–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        print("\nüìã –¢–µ—Å—Ç 2: task.getList —Å –±–∞–∑–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏...")
        params = {'pageCurrent': 1, 'pageSize': 5}
        response = planfix_utils.make_planfix_request('task.getList', params)
        print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, –¥–ª–∏–Ω–∞: {len(response)}")
        print(f"üìÑ –ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤: {response[:500]}...")
        
        # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
        print("\nüîç –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏ –≤ –æ—Ç–≤–µ—Ç–µ...")
        if 'status="error"' in response:
            print("‚ùå –í –æ—Ç–≤–µ—Ç–µ –µ—Å—Ç—å –æ—à–∏–±–∫–∞!")
            # –ò—â–µ–º –∫–æ–¥ –æ—à–∏–±–∫–∏
            if 'code>' in response:
                start = response.find('<code>') + 6
                end = response.find('</code>')
                if start > 5 and end > start:
                    error_code = response[start:end]
                    print(f"‚ùå –ö–æ–¥ –æ—à–∏–±–∫–∏: {error_code}")
        else:
            print("‚úÖ –í –æ—Ç–≤–µ—Ç–µ –Ω–µ—Ç –æ—à–∏–±–æ–∫")
            
        # –¢–µ—Å—Ç 4: –ü–∞—Ä—Å–∏–º XML
        print("\nüîç –¢–µ—Å—Ç 4: –ü–∞—Ä—Å–∏–Ω–≥ XML...")
        import xml.etree.ElementTree as ET
        try:
            root = ET.fromstring(response)
            print(f"‚úÖ XML —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω")
            print(f"üìä –ö–æ—Ä–Ω–µ–≤–æ–π —ç–ª–µ–º–µ–Ω—Ç: {root.tag}")
            print(f"üìä –ê—Ç—Ä–∏–±—É—Ç—ã: {root.attrib}")
            
            # –ò—â–µ–º –∑–∞–¥–∞—á–∏
            tasks = root.findall('.//task')
            print(f"üìã –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á: {len(tasks)}")
            
            if tasks:
                print("üìã –ü–µ—Ä–≤–∞—è –∑–∞–¥–∞—á–∞:")
                first_task = tasks[0]
                task_id = first_task.findtext('id')
                task_name = first_task.findtext('name')
                print(f"   ID: {task_id}")
                print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {task_name}")
                
        except ET.ParseError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ XML: {e}")
        
        print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        logger.error(f"Test failed: {e}", exc_info=True)
        return False
    
    return True

def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    """
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[logging.StreamHandler()]
    )
    
    try:
        test_task_list()
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
