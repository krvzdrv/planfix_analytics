#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Planfix API
"""

import os
import sys
import logging
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Add the parent directory to the Python path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
import scripts.planfix_utils as planfix_utils

logger = logging.getLogger(__name__)

def test_planfix_connection():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Planfix API
    """
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Planfix API...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        print(f"‚úÖ PLANFIX_ACCOUNT: {planfix_utils.PLANFIX_ACCOUNT}")
        print(f"‚úÖ PLANFIX_API_KEY: {'*' * len(planfix_utils.PLANFIX_API_KEY) if planfix_utils.PLANFIX_API_KEY else '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}")
        print(f"‚úÖ PLANFIX_TOKEN: {'*' * len(planfix_utils.PLANFIX_TOKEN) if planfix_utils.PLANFIX_TOKEN else '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}")
        
        # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫
        print("\nüìä –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫...")
        params = {'pageCurrent': 1, 'pageSize': 5}
        response = planfix_utils.make_planfix_request('analitic.getList', params)
        print("‚úÖ API analitic.getList —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
        print("\nüìã –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á...")
        params = {'pageCurrent': 1, 'pageSize': 5}
        response = planfix_utils.make_planfix_request('task.getList', params)
        print("‚úÖ API task.getList —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ "Produkty"
        print("\nüîç –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ 'Produkty'...")
        params = {
            'analiticKeys': {
                'key': 4867  # ID –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ "Produkty"
            }
        }
        response = planfix_utils.make_planfix_request('analitic.getData', params)
        print("‚úÖ API analitic.getData —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Planfix API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        logger.error(f"Connection test failed: {e}", exc_info=True)
        return False
    
    return True

def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    """
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[logging.StreamHandler()]
    )
    
    try:
        test_planfix_connection()
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
